image: trion/ng-cli

variables:
  BASE_URL: "flexy-demy"
  PROJECT_NAME: "flexy-demy-ui"
  HOST_DEPLOY_PATH: "/c/docker/nginx/html"

stages:
  - install
  - build_development
  - build_production
  - deploy_production
  - deploy_development

build_development:
  stage: build_development
  only:
    - elsoft
  script:
    # Step 1: Install frontend dependencies
    - npm install --force --legacy-peer-deps

    # Step 2: Build the Angular app in Docker
    - docker build --build-arg NODE_ENV=development --build-arg NODE_PORT=4200 -t ${PROJECT_NAME}:development .

    # Step 3: Cleanup previous temp container
    - docker rm -f temp-${PROJECT_NAME} || true

    # Step 4: Create temp container to extract build artifacts
    - docker create --name temp-${PROJECT_NAME} ${PROJECT_NAME}:development

    # 5. Ensure host deploy path exists
    - mkdir -p ${HOST_DEPLOY_PATH}

    # Step 6: Copy built app files to host path
    - docker cp temp-${PROJECT_NAME}:/app/browser/. ${HOST_DEPLOY_PATH}

    # Step 7: Remove temp container
    - docker rm temp-${PROJECT_NAME}

    # Step 8: Stop & remove previous dev container if it exists
    - docker stop ${PROJECT_NAME}-dev || true
    - docker rm ${PROJECT_NAME}-dev || true

    # Step 9: Start new nginx container with built files
    - docker run -d -p 4200:80 --name ${PROJECT_NAME}-dev -v ${HOST_DEPLOY_PATH}:/usr/share/nginx/html nginx:alpine

build_production:
  stage: build_production
  only:
    - main
  script:
    - npm cache clean --force
    - npm install --force --legacy-peer-deps
    #    - echo "${BASE_URL}"
    #    - ng build --configuration=production --base-href='./'
    - docker build --build-arg NODE_ENV=production --build-arg NODE_PORT=80 -t flexy-demy-ui:production .
    - |
      $CONTAINER_NAMES = docker ps --format '{{.Names}}' | ForEach-Object { $_.Trim() }
      if ($CONTAINER_NAMES -like "*flexy-demy-ui-prod*") {
        docker stop flexy-demy-ui-prod
        docker rm flexy-demy-ui-prod
      }
    - docker run -d -p 80:80 --name flexy-demy-ui-prod flexy-demy-ui:production
#deploy_production:
#  stage: deploy_production
#  only:
#    - main
#  script:
#    - rm -rf "C:/Program Files/Apache Software Foundation/Tomcat 9.0/webapps/${BASE_URL}"
#    - xcopy /s /y "${BASE_URL}" "C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\${BASE_URL}"
#    - rm -r "C:/Users/Administrator.ORNATE-TECH/AppData/Local/Jenkins/.jenkins/caches/*"
#
#deploy_development:
#  stage: deploy_development
#  only:
#    - dev
#  script:
#    - rm -rf "C:/Program Files/Apache Software Foundation/Tomcat 9.0/webapps/${BASE_URL}dev"
#    - xcopy /s /y "${BASE_URL}dev" "C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\${BASE_URL}dev"
#    - rm -r "C:/Users/Administrator.ORNATE-TECH/AppData/Local/Jenkins/.jenkins/caches/*"
